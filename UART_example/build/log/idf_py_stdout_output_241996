[1/10] Performing build step for 'bootloader'
[1/1] cd /home/metisa/Documents/ESP32/ESP_WorkSpace/UART_example/build/bootloader/esp-idf/esptool_py && /home/metisa/.espressif/python_env/idf5.2_py3.10_env/bin/python /home/metisa/Documents/ESP32/ESP_WorkSpace/esp-idf/components/partition_table/check_sizes.py --offset 0x8000 bootloader 0x1000 /home/metisa/Documents/ESP32/ESP_WorkSpace/UART_example/build/bootloader/bootloader.bin
Bootloader binary size 0x68a0 bytes. 0x760 bytes (7%) free.
[2/8] Building C object esp-idf/main/CMakeFiles/__idf_main.dir/main.c.obj
[3/8] Linking C static library esp-idf/main/libmain.a
[4/8] Generating ld/sections.ld
[5/8] Linking CXX executable main.elf
[6/8] Generating binary image from built executable
esptool.py v4.6.2
Creating esp32 image...
Merged 2 ELF sections
Successfully created esp32 image.
Generated /home/metisa/Documents/ESP32/ESP_WorkSpace/UART_example/build/main.bin
[7/8] cd /home/metisa/Documents/ESP32/ESP_WorkSpace/UART_example/build/esp-idf/esptool_py && /home/metisa/.espressif/python_env/idf5.2_py3.10_env/bin/python /home/metisa/Documents/ESP32/ESP_WorkSpace/esp-idf/components/partition_table/check_sizes.py --offset 0x8000 partition --type app /home/metisa/Documents/ESP32/ESP_WorkSpace/UART_example/build/partition_table/partition-table.bin /home/metisa/Documents/ESP32/ESP_WorkSpace/UART_example/build/main.bin
main.bin binary size 0x2de00 bytes. Smallest app partition is 0x100000 bytes. 0xd2200 bytes (82%) free.
[7/8] cd /home/metisa/Documents/ESP32/ESP_WorkSpace/esp-idf/components/esptool_py && /usr/bin/cmake -D IDF_PATH=/home/metisa/Documents/ESP32/ESP_WorkSpace/esp-idf -D "SERIAL_TOOL=/home/metisa/.espressif/python_env/idf5.2_py3.10_env/bin/python;;/home/metisa/Documents/ESP32/ESP_WorkSpace/esp-idf/components/esptool_py/esptool/esptool.py;--chip;esp32" -D "SERIAL_TOOL_ARGS=--before=default_reset;--after=hard_reset;write_flash;@flash_args" -D WORKING_DIRECTORY=/home/metisa/Documents/ESP32/ESP_WorkSpace/UART_example/build -P /home/metisa/Documents/ESP32/ESP_WorkSpace/esp-idf/components/esptool_py/run_serial_tool.cmake
esptool esp32 -p /dev/ttyUSB0 -b 460800 --before=default_reset --after=hard_reset write_flash --flash_mode dio --flash_freq 40m --flash_size 4MB 0x1000 bootloader/bootloader.bin 0x10000 main.bin 0x8000 partition_table/partition-table.bin
esptool.py v4.6.2
Serial port /dev/ttyUSB0
Connecting.......
Chip is ESP32-D0WD-V3 (revision v3.0)
Features: WiFi, BT, Dual Core, 240MHz, VRef calibration in efuse, Coding Scheme None
WARNING: Detected crystal freq 41.01MHz is quite different to normalized freq 40MHz. Unsupported crystal in use?
Crystal is 40MHz
MAC: b8:d6:1a:68:ce:2c
Uploading stub...
Running stub...
Stub running...
Changing baud rate to 460800
Changed.
Configuring flash size...
Flash will be erased from 0x00001000 to 0x00007fff...
Flash will be erased from 0x00010000 to 0x0003dfff...
Flash will be erased from 0x00008000 to 0x00008fff...
Compressed 26784 bytes to 16828...
Writing at 0x00001000... (50 %)
Writing at 0x00007677... (100 %)
Wrote 26784 bytes (16828 compressed) at 0x00001000 in 0.7 seconds (effective 323.7 kbit/s)...
Hash of data verified.
Compressed 187904 bytes to 105054...
Writing at 0x00010000... (14 %)
Writing at 0x0001c749... (28 %)
Writing at 0x00022011... (42 %)
Writing at 0x00027885... (57 %)
Writing at 0x0002dc13... (71 %)
Writing at 0x00035aaf... (85 %)
Writing at 0x0003b840... (100 %)
Wrote 187904 bytes (105054 compressed) at 0x00010000 in 2.6 seconds (effective 571.8 kbit/s)...
Hash of data verified.
Compressed 3072 bytes to 103...
Writing at 0x00008000... (100 %)
Wrote 3072 bytes (103 compressed) at 0x00008000 in 0.0 seconds (effective 614.5 kbit/s)...
Hash of data verified.

Leaving...
Hard resetting via RTS pin...
